const express = require('express');
const { createClient } = require('@supabase/supabase-js');
const TronWeb = require('tronweb');

const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SUPABASE_URL = process.env.SUPABASE_URL || 'https://bpsmizhrzgfbjqfpqkcz.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const TRONGRID_API_KEY = process.env.TRONGRID_API_KEY || '19e2411a-3c3e-479d-8c85-2abc716af397';

// TronWeb –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const tronWeb = new TronWeb({
  fullHost: 'https://api.trongrid.io',
  headers: { 'TRON-PRO-API-KEY': TRONGRID_API_KEY }
});

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏
const COMPANY = {
  MASTER: {
    address: 'TPuGfq19uZN7mNRrgjzfTnrexC9gKFMo7Z',
    privateKey: '600eedecf2d0553ad1157e66a6ed9bbab049216383a851e3ff7ab430ca3c2634'
  },
  MAIN: {
    address: 'TBwcRtgvbwFicGWtX4PvwWpw5EGMmAiaNS',
    privateKey: '6a94e6b9f9d49ce41155f301b7593dc0aed0d4bbff887f2af225a84a69294a76'
  }
};

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

app.use(express.json());

// Middleware CORS
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Headers', 'authorization, x-client-info, apikey, content-type');
  res.header('Access-Control-Allow-Methods', 'POST, OPTIONS, GET');
  next();
});

// ========== –û–¢–õ–ê–î–û–ß–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –¢–†–ê–°–°–ò–†–û–í–ö–ò –î–ï–ù–ï–ì ==========

// üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ë–ê–õ–ê–ù–°–û–í
app.get('/debug-money', async (req, res) => {
  try {
    console.log('üí∞ === –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –î–ï–ù–ï–ñ–ù–´–• –ü–û–¢–û–ö–û–í ===');
    
    const { data: wallets } = await supabase.from('user_wallets').select('*');
    const { data: deposits } = await supabase.from('deposits').select('*');
    const { data: collections } = await supabase.from('collections').select('*');

    const balanceInfo = [];
    let totalUserUSDT = 0;
    let totalUserTRX = 0;

    // –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    for (const wallet of wallets || []) {
      const usdtBalance = await getUSDTBalance(wallet.address);
      const trxBalance = await getTRXBalance(wallet.address);
      
      totalUserUSDT += usdtBalance;
      totalUserTRX += trxBalance;

      balanceInfo.push({
        user_id: wallet.user_id,
        address: wallet.address,
        usdt_balance: usdtBalance,
        trx_balance: trxBalance,
        last_checked: wallet.last_checked
      });
    }

    // –ë–∞–ª–∞–Ω—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    const masterUSDT = await getUSDTBalance(COMPANY.MASTER.address);
    const masterTRX = await getTRXBalance(COMPANY.MASTER.address);
    const mainUSDT = await getUSDTBalance(COMPANY.MAIN.address);
    const mainTRX = await getTRXBalance(COMPANY.MAIN.address);

    // –°—É–º–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { data: users } = await supabase.from('users').select('balance, total_profit');
    const totalBalanceInDB = users?.reduce((sum, user) => sum + (user.balance || 0), 0) || 0;
    const totalProfitInDB = users?.reduce((sum, user) => sum + (user.total_profit || 0), 0) || 0;

    const debugInfo = {
      timestamp: new Date().toISOString(),
      
      // –†–ï–ê–õ–¨–ù–´–ï –ë–ê–õ–ê–ù–°–´ –í –ë–õ–û–ö–ß–ï–ô–ù–ï
      blockchain_balances: {
        user_wallets_total: {
          usdt: totalUserUSDT,
          trx: totalUserTRX,
          wallet_count: wallets?.length || 0
        },
        company_wallets: {
          master: {
            address: COMPANY.MASTER.address,
            usdt: masterUSDT,
            trx: masterTRX
          },
          main: {
            address: COMPANY.MAIN.address,
            usdt: mainUSDT,
            trx: mainTRX
          }
        },
        total_company_usdt: masterUSDT + mainUSDT,
        total_system_usdt: totalUserUSDT + masterUSDT + mainUSDT
      },

      // –ë–ê–õ–ê–ù–°–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
      database_totals: {
        total_user_balance: totalBalanceInDB,
        total_user_profit: totalProfitInDB,
        total_deposits: deposits?.length || 0,
        total_collections: collections?.length || 0
      },

      // –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
      user_wallets: balanceInfo,
      recent_deposits: deposits?.slice(-10) || [],
      recent_collections: collections?.slice(-10) || []
    };

    console.log('üíµ –û–¢–ß–ï–¢ –û –î–ï–ù–ï–ñ–ù–´–• –ü–û–¢–û–ö–ê–•:');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ—à–µ–ª—å–∫–∏: ${totalUserUSDT} USDT, ${totalUserTRX} TRX`);
    console.log(`üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${debugInfo.blockchain_balances.total_company_usdt} USDT`);
    console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${totalBalanceInDB} USDT –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`üìà –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits?.length || 0}`);
    console.log(`üîÑ –í—Å–µ–≥–æ —Å–±–æ—Ä–æ–≤: ${collections?.length || 0}`);

    res.json(debugInfo);

  } catch (error) {
    console.error('‚ùå Debug error:', error);
    res.status(500).json({ error: error.message });
  }
});

// üîç –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ö–û–®–ï–õ–¨–ö–ê
app.get('/debug-wallet/:address', async (req, res) => {
  try {
    const { address } = req.params;
    
    console.log(`üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: ${address}`);
    
    const usdtBalance = await getUSDTBalance(address);
    const trxBalance = await getTRXBalance(address);
    const transactions = await getUSDTTransactions(address);
    
    // –ò—â–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –≤ –±–∞–∑–µ
    const { data: deposits } = await supabase
      .from('deposits')
      .select('*')
      .eq('txid', transactions.map(tx => tx.transaction_id));

    const walletInfo = {
      address: address,
      balances: {
        usdt: usdtBalance,
        trx: trxBalance
      },
      transactions: transactions.map(tx => ({
        txid: tx.transaction_id,
        from: tx.from,
        to: tx.to,
        amount: tx.value / 1000000,
        confirmed: tx.confirmed,
        timestamp: tx.block_timestamp,
        symbol: tx.token_info?.symbol,
        in_database: deposits?.some(d => d.txid === tx.transaction_id) || false
      })),
      transaction_count: transactions.length
    };

    console.log(`üìä –ö–æ—à–µ–ª–µ–∫ ${address}:`);
    console.log(`   USDT: ${usdtBalance}, TRX: ${trxBalance}`);
    console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
    
    res.json(walletInfo);

  } catch (error) {
    console.error('‚ùå Wallet debug error:', error);
    res.status(500).json({ error: error.message });
  }
});

// üîç –†–£–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ï–ü–û–ó–ò–¢–û–í
app.post('/debug-check-deposit', async (req, res) => {
  try {
    const { user_id } = req.body;
    
    if (!user_id) {
      return res.status(400).json({ error: 'User ID required' });
    }

    console.log(`üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user_id}`);

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: wallet } = await supabase
      .from('user_wallets')
      .select('*')
      .eq('user_id', user_id)
      .single();

    if (!wallet) {
      return res.status(404).json({ error: 'Wallet not found' });
    }

    const transactions = await getUSDTTransactions(wallet.address);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length} –¥–ª—è ${wallet.address}`);

    const results = [];
    
    for (const tx of transactions) {
      const isUSDT = tx.token_info?.symbol === 'USDT' || 
                     tx.token_info?.address === 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t';
      const isToWallet = tx.to === wallet.address.toLowerCase();
      const isTransfer = tx.type === 'Transfer';
      const isConfirmed = tx.confirmed === true;
      
      if (isUSDT && isToWallet && isTransfer && isConfirmed) {
        const amount = tx.value / 1000000;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ
        const { data: existingDeposit } = await supabase
          .from('deposits')
          .select('id')
          .eq('txid', tx.transaction_id)
          .maybeSingle();

        results.push({
          txid: tx.transaction_id,
          amount: amount,
          confirmed: isConfirmed,
          in_database: !!existingDeposit,
          status: existingDeposit ? '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω' : '‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
        });
      }
    }

    res.json({
      wallet: wallet.address,
      transactions_checked: transactions.length,
      valid_deposits: results,
      user_balance: await getUSDTBalance(wallet.address)
    });

  } catch (error) {
    console.error('‚ùå Manual check error:', error);
    res.status(500).json({ error: error.message });
  }
});

// ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò ==========

// ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
app.post('/generate-wallet', async (req, res) => {
  try {
    const { user_id } = req.body;
    
    if (!user_id) {
      return res.status(400).json({
        success: false,
        error: 'User ID is required'
      });
    }

    console.log(`üîê Generating wallet for user: ${user_id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ—à–µ–ª—ë–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: existingWallet } = await supabase
      .from('user_wallets')
      .select('address')
      .eq('user_id', user_id)
      .single();

    if (existingWallet) {
      console.log(`‚úÖ Wallet already exists: ${existingWallet.address}`);
      return res.json({
        success: true,
        address: existingWallet.address,
        exists: true
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫
    const account = TronWeb.utils.accounts.generateAccount();
    
    if (!account) {
      throw new Error('Failed to generate wallet');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const { data, error } = await supabase
      .from('user_wallets')
      .insert({
        user_id: user_id,
        address: account.address.base58,
        private_key: account.privateKey,
        created_at: new Date().toISOString()
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå Database error:', error);
      return res.status(500).json({
        success: false,
        error: 'Failed to save wallet'
      });
    }

    console.log(`‚úÖ New wallet created: ${account.address.base58} for user ${user_id}`);

    res.json({
      success: true,
      address: account.address.base58,
      exists: false
    });

  } catch (error) {
    console.error('‚ùå Generate wallet error:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
});

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (GET –¥–ª—è cron jobs)
app.get('/check-deposits', async (req, res) => {
  await handleCheckDeposits(req, res);
});

// ‚úÖ –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
async function handleCheckDeposits(req, res) {
  try {
    console.log('üîÑ === STARTING DEPOSIT CHECK ===');
    
    const { data: wallets, error } = await supabase
      .from('user_wallets')
      .select('*');

    if (error) {
      throw new Error(`Wallets fetch error: ${error.message}`);
    }

    console.log(`üîç Checking ${wallets?.length || 0} wallets`);
    let processedCount = 0;
    let totalDeposits = 0;

    for (const wallet of wallets || []) {
      try {
        console.log(`\nüîé Checking wallet: ${wallet.address} (User: ${wallet.user_id})`);
        const transactions = await getUSDTTransactions(wallet.address);
        
        // –î–ï–¢–ê–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
        const usdtTransactions = transactions.filter(tx => {
          const isUSDT = tx.token_info?.symbol === 'USDT' || 
                         tx.token_info?.address === 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t';
          const isToWallet = tx.to === wallet.address.toLowerCase();
          const isTransfer = tx.type === 'Transfer';
          const isConfirmed = tx.confirmed === true;
          
          const isValid = isUSDT && isToWallet && isTransfer && isConfirmed;
          
          if (isValid) {
            console.log(`‚úÖ Valid USDT transaction found:`, {
              txid: tx.transaction_id,
              amount: tx.value / 1000000,
              from: tx.from,
              to: tx.to
            });
          }
          
          return isValid;
        });

        console.log(`üí∞ Found ${usdtTransactions.length} valid USDT transactions`);

        for (const tx of usdtTransactions) {
          const amount = tx.value / 1000000;
          console.log(`üìä Processing: ${tx.transaction_id}, Amount: ${amount} USDT`);

          if (amount < 30) {
            console.log(`‚ùå Deposit too small: ${amount} USDT (min: 30 USDT)`);
            continue;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          const { data: existingDeposit } = await supabase
            .from('deposits')
            .select('id, user_id, amount')
            .eq('txid', tx.transaction_id)
            .maybeSingle();

          if (!existingDeposit) {
            console.log(`üéØ NEW DEPOSIT DETECTED: ${amount} USDT to ${wallet.address}`);
            await processDeposit(wallet, amount, tx.transaction_id);
            processedCount++;
            totalDeposits += amount;
          } else {
            console.log(`‚è≠Ô∏è Deposit already processed: ${tx.transaction_id}`);
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await supabase
          .from('user_wallets')
          .update({ last_checked: new Date().toISOString() })
          .eq('id', wallet.id);

      } catch (error) {
        console.error(`‚ùå Error processing wallet ${wallet.address}:`, error);
      }
    }

    console.log(`‚úÖ DEPOSIT CHECK COMPLETE: Processed ${processedCount} deposits, Total: ${totalDeposits} USDT`);

    res.json({
      success: true,
      message: `‚úÖ Processed ${processedCount} deposits (${totalDeposits} USDT) from ${wallets?.length || 0} wallets`
    });

  } catch (error) {
    console.error('‚ùå Deposit check error:', error);
    res.status(500).json({ success: false, error: error.message });
  }
}

// ‚úÖ –°–±–æ—Ä —Å—Ä–µ–¥—Å—Ç–≤ (GET –¥–ª—è cron jobs)
app.get('/collect-funds', async (req, res) => {
  await handleCollectFunds(req, res);
});

// ‚úÖ –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤
async function handleCollectFunds(req, res) {
  try {
    console.log('üí∞ === STARTING FUNDS COLLECTION ===');
    
    const { data: wallets, error } = await supabase
      .from('user_wallets')
      .select('*');

    if (error) {
      throw new Error(`Wallets fetch error: ${error.message}`);
    }

    let collectedCount = 0;
    let totalCollected = 0;
    let failedCount = 0;

    for (const wallet of wallets || []) {
      try {
        console.log(`\nüîç Checking collection for: ${wallet.address}`);
        const success = await autoCollectToMainWallet(wallet);
        if (success) {
          collectedCount++;
          totalCollected += success.amount;
          console.log(`‚úÖ Collected ${success.amount} USDT from ${wallet.address}`);
        } else {
          failedCount++;
        }
      } catch (error) {
        console.error(`‚ùå Error collecting from ${wallet.address}:`, error);
        failedCount++;
      }
    }

    console.log(`üí∞ COLLECTION COMPLETE: Collected ${totalCollected} USDT from ${collectedCount} wallets, Failed: ${failedCount}`);

    res.json({
      success: true,
      message: `‚úÖ Collected ${totalCollected.toFixed(2)} USDT from ${collectedCount} wallets, Failed: ${failedCount}`
    });

  } catch (error) {
    console.error('‚ùå Funds collection error:', error);
    res.status(500).json({ success: false, error: error.message });
  }
}

// ‚úÖ –£–º–Ω—ã–π —Å–±–æ—Ä —Å—Ä–µ–¥—Å—Ç–≤
async function autoCollectToMainWallet(wallet) {
  try {
    const usdtBalance = await getUSDTBalance(wallet.address);
    console.log(`üìä ${wallet.address} USDT Balance: ${usdtBalance}`);
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º 1 USDT –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ
    const amountToTransfer = usdtBalance - 1;
    
    if (amountToTransfer <= 0) {
      console.log(`‚è≠Ô∏è No funds to collect (balance: ${usdtBalance} USDT)`);
      return false;
    }

    console.log(`üí∏ Collecting ${amountToTransfer} USDT from ${wallet.address}`);

    const trxBalance = await getTRXBalance(wallet.address);
    console.log(`‚õΩ ${wallet.address} TRX Balance: ${trxBalance}`);
    
    // –ï—Å–ª–∏ –º–∞–ª–æ TRX –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å MASTER
    if (trxBalance < 10) {
      console.log(`‚õΩ Sending 15 TRX to ${wallet.address} for gas`);
      const trxSent = await sendTRX(COMPANY.MASTER.privateKey, wallet.address, 15);
      if (trxSent) {
        console.log(`‚úÖ TRX sent successfully, waiting 10 seconds...`);
        await sleep(10000);
      } else {
        console.log(`‚ùå Failed to send TRX for gas`);
        return false;
      }
    }

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º USDT –Ω–∞ MAIN –∫–æ—à–µ–ª–µ–∫
    console.log(`üîÑ Transferring ${amountToTransfer} USDT to main wallet...`);
    const transferResult = await transferUSDT(wallet.private_key, COMPANY.MAIN.address, amountToTransfer);
    
    if (transferResult) {
      console.log(`‚úÖ Successfully collected ${amountToTransfer} USDT from ${wallet.address}`);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–±–æ—Ä –≤ –±–∞–∑—É
      await supabase
        .from('collections')
        .insert({
          wallet_address: wallet.address,
          user_id: wallet.user_id,
          amount: amountToTransfer,
          collected_to: COMPANY.MAIN.address,
          trx_used: await getTRXBalance(wallet.address),
          created_at: new Date().toISOString()
        });
      
      return { success: true, amount: amountToTransfer };
    } else {
      console.log(`‚ùå Failed to transfer USDT from ${wallet.address}`);
      return false;
    }

  } catch (error) {
    console.error(`‚ùå Collection error for ${wallet.address}:`, error);
    return false;
  }
}

// ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
async function processDeposit(wallet, amount, txid) {
  try {
    console.log(`\nüí∞ PROCESSING DEPOSIT: ${amount} USDT for user ${wallet.user_id}`);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await ensureUserExists(wallet.user_id);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user } = await supabase
      .from('users')
      .select('balance, total_profit, vip_level')
      .eq('id', wallet.user_id)
      .single();

    if (user) {
      const newBalance = (user.balance || 0) + amount;
      const newTotalProfit = (user.total_profit || 0) + amount;

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: updateError } = await supabase
        .from('users')
        .update({
          balance: newBalance,
          total_profit: newTotalProfit,
          updated_at: new Date().toISOString()
        })
        .eq('id', wallet.user_id);

      if (updateError) {
        throw new Error(`Failed to update user balance: ${updateError.message}`);
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–µ–ø–æ–∑–∏—Ç–µ
      const { error: depositError } = await supabase
        .from('deposits')
        .insert({
          user_id: wallet.user_id,
          wallet_address: wallet.address,
          amount: amount,
          txid: txid,
          status: 'confirmed',
          created_at: new Date().toISOString()
        });

      if (depositError) {
        throw new Error(`Failed to create deposit record: ${depositError.message}`);
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await supabase
        .from('transactions')
        .insert({
          user_id: wallet.user_id,
          type: 'deposit',
          amount: amount,
          description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞',
          status: 'completed',
          created_at: new Date().toISOString()
        });

      // –û–±–Ω–æ–≤–ª—è–µ–º VIP —É—Ä–æ–≤–µ–Ω—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (newBalance >= 30 && user.vip_level === 0) {
        await supabase
          .from('users')
          .update({ vip_level: 1 })
          .eq('id', wallet.user_id);
      }

      console.log(`‚úÖ DEPOSIT PROCESSED: ${amount} USDT for user ${wallet.user_id}`);
      console.log(`   New balance: ${newBalance} USDT, New total profit: ${newTotalProfit} USDT`);

      // –ó–ê–ü–£–°–ö–ê–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –°–ë–û–† –°–†–ï–î–°–¢–í
      console.log(`üîÑ Starting auto-collection after deposit...`);
      setTimeout(() => {
        autoCollectToMainWallet(wallet);
      }, 5000);

    } else {
      throw new Error('User not found after creation');
    }
  } catch (error) {
    console.error('‚ùå Error processing deposit:', error);
    throw error;
  }
}

// ========== TRON API –§–£–ù–ö–¶–ò–ò ==========

async function getUSDTBalance(address) {
  try {
    const contract = await tronWeb.contract().at('TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t');
    const balance = await contract.balanceOf(address).call();
    return balance / 1000000;
  } catch (error) {
    console.error(`‚ùå USDT balance error for ${address}:`, error);
    return 0;
  }
}

async function getTRXBalance(address) {
  try {
    const balance = await tronWeb.trx.getBalance(address);
    return balance / 1000000;
  } catch (error) {
    console.error(`‚ùå TRX balance error for ${address}:`, error);
    return 0;
  }
}

async function getUSDTTransactions(address) {
  try {
    const response = await fetch(
      `https://api.trongrid.io/v1/accounts/${address}/transactions/trc20?limit=50&only_confirmed=true`,
      {
        headers: {
          'Accept': 'application/json',
          'TRON-PRO-API-KEY': TRONGRID_API_KEY
        }
      }
    );

    if (!response.ok) {
      throw new Error(`TronGrid API error: ${response.status}`);
    }

    const data = await response.json();
    return data.data || [];
  } catch (error) {
    console.error('‚ùå Transactions error:', error);
    return [];
  }
}

async function transferUSDT(fromPrivateKey, toAddress, amount) {
  try {
    const privateKey = fromPrivateKey.startsWith('0x') ? fromPrivateKey : '0x' + fromPrivateKey;
    const tronWebWithPrivateKey = new TronWeb({
      fullHost: 'https://api.trongrid.io',
      headers: { 'TRON-PRO-API-KEY': TRONGRID_API_KEY },
      privateKey: privateKey
    });

    const contract = await tronWebWithPrivateKey.contract().at('TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t');
    
    const amountInSun = Math.floor(amount * 1000000);
    
    console.log(`üîÑ Sending ${amount} USDT (${amountInSun} sun) from ${tronWebWithPrivateKey.address.fromPrivateKey(privateKey)} to ${toAddress}`);
    
    const result = await contract.transfer(toAddress, amountInSun).send();
    
    console.log(`‚úÖ USDT transfer successful: ${amount} USDT, TX: ${result}`);
    return true;
  } catch (error) {
    console.error('‚ùå USDT transfer error:', error);
    return false;
  }
}

async function sendTRX(fromPrivateKey, toAddress, amount) {
  try {
    const privateKey = fromPrivateKey.startsWith('0x') ? fromPrivateKey : '0x' + fromPrivateKey;
    const tronWebWithPrivateKey = new TronWeb({
      fullHost: 'https://api.trongrid.io',
      headers: { 'TRON-PRO-API-KEY': TRONGRID_API_KEY },
      privateKey: privateKey
    });

    const fromAddress = tronWebWithPrivateKey.address.fromPrivateKey(privateKey);
    
    const transaction = await tronWebWithPrivateKey.transactionBuilder.sendTrx(
      toAddress,
      tronWebWithPrivateKey.toSun(amount),
      fromAddress
    );
    
    const signedTransaction = await tronWebWithPrivateKey.trx.sign(transaction);
    const result = await tronWebWithPrivateKey.trx.sendRawTransaction(signedTransaction);
    
    console.log(`‚úÖ TRX sent: ${amount} TRX from ${fromAddress} to ${toAddress}, TX: ${result}`);
    return true;
  } catch (error) {
    console.error('‚ùå TRX send error:', error);
    return false;
  }
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

async function ensureUserExists(userId) {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('id')
      .eq('id', userId)
      .single();

    if (error || !data) {
      const { error: insertError } = await supabase
        .from('users')
        .insert({
          id: userId,
          email: `user-${userId}@temp.com`,
          username: `user-${userId.substring(0, 8)}`,
          referral_code: `REF-${userId.substring(0, 8)}`,
          balance: 0.00,
          total_profit: 0.00,
          vip_level: 0,
          created_at: new Date().toISOString()
        });

      if (insertError && !insertError.message.includes('duplicate key')) {
        console.error('‚ùå Error creating user:', insertError);
      } else {
        console.log(`‚úÖ User created: ${userId}`);
      }
    }
  } catch (error) {
    console.error('‚ùå ensureUserExists error:', error);
  }
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Health check
app.get('/', (req, res) => {
  res.json({ 
    status: '‚úÖ OK', 
    message: 'Tron Wallet System is running',
    timestamp: new Date().toISOString(),
    endpoints: {
      debug: '/debug-money',
      check_deposits: '/check-deposits', 
      collect_funds: '/collect-funds',
      debug_wallet: '/debug-wallet/:address',
      manual_check: 'POST /debug-check-deposit'
    }
  });
});

app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üìä Supabase: ${SUPABASE_URL ? '‚úÖ CONNECTED' : '‚ùå MISSING'}`);
  console.log(`üîë TronGrid: ${TRONGRID_API_KEY ? '‚úÖ SET' : '‚ùå MISSING'}`);
  console.log(`üí∞ MASTER Wallet: ${COMPANY.MASTER.address}`);
  console.log(`üí∞ MAIN Wallet: ${COMPANY.MAIN.address}`);
  console.log(`üîç Debug endpoints available at: http://localhost:${PORT}/debug-money`);
});
